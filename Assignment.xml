<section
	 xmlns:r="http://www.r-project.org">
<title>Evaluating Assignments</title>

<note>

<para>
Five assignment operators: `=`, <![CDATA[`<-`]]>, <![CDATA[`<<-`]]> and both <![CDATA[`->`]]> and <![CDATA[`->>`]]>.
The parser transforms the latter two to calls to <![CDATA[`<-`]]> and <![CDATA[`<<-`]]> respectively.
So we only need to consider the first three.
To verify this
<r:code>
e = quote( foo(x) -> y)
<r:output><![CDATA[
y <- foo(x)
]]></r:output>
e[[1]]
<r:output><![CDATA[
`<-`
]]></r:output>
e = quote( foo(x) ->> y)
<r:output><![CDATA[
y <<- foo(x)
]]></r:output>
e[[1]]
<r:output><![CDATA[
`<<-`
]]></r:output>
</r:code>
</para>


<para>
All three `=`, <![CDATA[`<-`]]>, <![CDATA[`<<-`]]> are functions:
<r:code>
sapply(list(`=`, `<-`, `<<-`), class)
<r:output><![CDATA[
[1] "function" "function" "function"
]]></r:output>
sapply(list(`=`, `<-`, `<<-`), typeof)
<r:output><![CDATA[
[1] "special" "special" "special"
]]></r:output>
</r:code>
So they are functions, but special to the interpreter, i.e., not evaluated in the usual manner.
Instead they immediately pass control to <c/> code in the interpreter.
</para>
<para>
What routines in the <c/> code correspond to these functions?
In <file>src/main/names.c</file>, we have
<programlisting><![CDATA[
{"<-",		do_set,		1,	100,	-1,	{PP_ASSIGN,  PREC_LEFT,	  1}},
{"=",		do_set,		3,	100,	-1,	{PP_ASSIGN,  PREC_EQ,	  1}},
{"<<-",		do_set,		2,	100,	-1,	{PP_ASSIGN2, PREC_LEFT,	  1}},
]]></programlisting>
All three call the routine <c:func>do_set</c:func> but with different values for the offset - the third value (1, 3, 2).
</para>
<para>
<c:func>do_set</c:func> is defined in <file>eval.c</file>. It is a short routine.
It handles the left-hand-side, i.e. the target of the assignment, being a string, a symbol/name, or a language object
(e.g., <r:expr>x$foo[[1]]</r:expr>).
For a name, if the call uses non-local assignment (<![CDATA[ <<- ]]>), <c:func>do_set</c:func> calls <r:func>setVar</r:func>;
otherwise, for local assignments, <c:func>do_set</c:func> calls <c:func>defineVar</c:func>.
</para>

<para>
<c:func>setVar</c:func> consists of a loop that calls <c:func>setVarInFrame</c:func>.
If it returns with a non-<r:null/> value, the assignment has been completed in the current frame.
Otherwise, we continue to the next frame.
Basically, <c:func>setVarInFrame</c:func> checks for the existence of a variable with the specified name in the given
environment.
If it is present, it performs the assignment and returns a non-<r:null/> value. However, if there is no entry with the
given variable name, it returns <r:null/>.
So <c:func>setVar</c:func>  tries to assign in the earliest environment in the environment chain
in which the variable name exists.
However, if it ultimately never finds a environment in the chain with that variable name, it calls
<c:code><![CDATA[
defineVar(symbol, value, R_GlobalEnv);
]]></c:code>
which assigns the value to the variable name in the global environment.
So, if the variable doesn't already exist, it is defined in the global environment.
</para>

<para>
Let's think this through
<r:code>
find("x")
env1 = new.env(parent = baseenv())
env2 = new.env(parent = e1)
eval(quote( x <<- 1), env2)
find("x")
<r:output><![CDATA[
[1] ".GlobalEnv"
]]></r:output>
</r:code>
Starting again
<r:code>
rm("x")
env1 = new.env(parent = baseenv())
env2 = new.env(parent = env1)
env1$x = 2
eval(quote( x <<- 1), env2)
find("x")
<r:output><![CDATA[
character(0)
]]></r:output>
ls(env2)
<r:output><![CDATA[
character(0)
]]></r:output>
ls(env1)
<r:output><![CDATA[
[1] "x"
]]></r:output>
env1$x
<r:output><![CDATA[
[1] 1
]]></r:output>
</r:code>
So we replaced the original value of the variable <r:var>x</r:var> in <r:var>e1</r:var> with the value 1, from the
previous value 2.
</para>


<para>
This rule of assigning to the global environment is true, but not
necessarily sensible. We can further simplify the first example above
to have a single environment <r:var>env1</r:var> whose parent is the base environment
and then make an non-local assignment to <r:var>x</r:var>:
<r:code>
env = new.env(parent = baseenv())
eval( quote( x <<- 2), env)
</r:code>
While the evaluation makes no reference to the global environment and
explicitly bypasses/avoids it, the non-local assignment uses the global environment.
I would argue <r:var>x</r:var> should be assigned in <r:var>env</r:var>.
However, <r>'s implementation doesn't do this and it would require
passing the top-level evaluation environment through the <c/> calls stack,
and indeed both the <r:arg>local</r:arg> and <r:arg>enclos</r:arg> arguments
of the call to <r:var>eval</r:var>.
</para>



<para>
For local assignments, i.e.,  `=` and <![CDATA[<-]]>,
<c:func>do_set</c:func> calls <c:func>defineVar</c:func> which is in <file>envir.c</file>.
This does some checks, and then handles the base namespace/package specially with <c:func>gsetVar</c:func>
</para>


</note>


<para>
Simple assignment to variables is straightforward.
When we assign to a variable 
<r:code>
x = 1
</r:code>
this is evaluated in the current environment.
If this is a top-level, interactive command, this is the global environment.
If it is within the body of a function, it is in the call frame for this call to that function.
The assignment will made locally within this call and disappear after the call ends.
</para>

<para>
Assignment is seemingly slightly more complicated when 1) a variable already exists in the search path
and 2) also when we assign to a sub-element within a variable on the search path, e.g, <r:expr>a$x</r:expr>. However, it
is still local to the caller's environment.
We'll setup an artificial situation to illustrate how assignment works in these cases.
The take-away is the assignment is local, not overwriting the original object along the search path.
</para>
<para>
We'll create an environment, assign some variable-value pairs to it, and then
put it on the search path using <r:func>attach</r:func>. (Don't use attach !)
We create a the environment and create two variables - <r:var>a</r:var> and <r:var>b</r:var>.
<r:var>a</r:var> is a list with an element named x; <r:var>b</r:var> is a simple vector:
<r:code>
e = new.env()
e$a = list(x = 1)
e$b = 1
</r:code>
We query the search path and then attach this environment in the second position:
<r:code>
search()
attach(e, 2)
</r:code>
We can verify that is present with
<r:code>
search()
ls(2)
</r:code>
</para>
<para>
Where is <r:var>a</r:var>:
<r:code>
find("a")
</r:code>
and what is its value
<r:code>
<r:output><![CDATA[
$x
[1] 1
]]></r:output>
</r:code>
Now, we add a new element <r:el>y</r:el> to <r:var>a</r:var>:
<r:code>
a$y = 101
</r:code>
Where is <r:var>a</r:var> now?
<r:code>
find("a")
<r:output><![CDATA[
[1] ".GlobalEnv" "e"
]]></r:output>
</r:code>
What is its value. We give the command <r:expr>a</r:expr> and see
<r:output><![CDATA[
a
$x
[1] 1

$y
[1] 101
]]></r:output>
What about the one in <r:var>e</r:var>?
<r:code>
get("a", 2)
$x
[1] 1
</r:code>
Alternatively, we can see the two with 
<r:code>
lapply(find("a"), function(e) get("a", e))
<r:output><![CDATA[
[[1]]
[[1]]$x
[1] 1

[[1]]$y
[1] 101


[[2]]
[[2]]$x
[1] 1
]]></r:output>
</r:code>
</para>


<para>
What if we remove our new local version of <r:var>a</r:var> and try to change the one in the second
<r:code><![CDATA[
rm(a)
a$x <<- 100
]]></r:code>
<r:code>
find("a")
<r:output><![CDATA[
[1] "e"
]]></r:output>
</r:code>
The value bound to <r:var>a</r:var> is
<r:code>
a
<r:output><![CDATA[
$x
[1] 100
]]></r:output>
</r:code>
So the explicit non-local assignment with <r:keyword><![CDATA[<<-]]></r:keyword> changed the original, existing variable's value.
It did not create a new local variable in the environment of the call, i.e., the global environment.
</para>



<para>
The lesson here is that assignments are local, unless explicitly using <r:keyword><![CDATA[<<-]]></r:keyword>
</para>

<para><fix/>
This exploration shows why <r:func>attach</r:func> can be confusing, at best, and worse lead to significant errors.
Consider the following sequence of commands.
How many separate versions of the <r:el>mpg</r:el> vector are there in the following three commands:
<r:code>
attach(mtcars)
mpg[3] = -1
lm(mpg ~ . , mtcars)
</r:code>
</para>
<para>
The answer is 3:
<ol>
<li>in the global environment</li>
<li>in the second element of the search path</li>
<li>in the data.frame <r:var>mtcars</r:var> variable </li>
</ol>
</para>
<para>
To see this, let's start from scratch.
<r:code>
rm(mpg)
</r:code>
Now consider
<r:code>
find("mpg")
attach(mtcars)
find("mpg")
mpg[3] = NA
find("mpg")
mpg
get("mpg", 2)
mpg[3]  = 100
mtcars$mpg
tmp = cbind(mpg, get("mpg", 2), mtcars$mpg)
tmp[3,]
</r:code>
</para>


</section>
