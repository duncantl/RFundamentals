<section
	 xmlns:r="http://www.r-project.org"
	 xmlns:xi="http://www.w3.org/2003/XInclude">
<title>Introduction to the Evaluation Model</title>
<!-- see Computing3.md and bring in material from there. -->

<para>
We've seen parsing and the very high-level idea of evaluation - finding variables and the associated value,
calling functions. We'll now get into the details, incrementally introducing the different situations.
We'll look at how <r/> evaluates
<ol>
<li>literal values</li>
<li>variable names (also known as symbols)</li>
<li>function calls, i.e., calls to functions such as <r:expr>1 + 2</r:expr>, <r:expr>rnorm(length(x), sd = 5)</r:expr></li>
</ol>
These cover the vast majority of evaluation in <r/>. This is because
even <r:keyword>if</r:keyword> and <r:keyword>for</r:keyword>/<r:keyword>while</r:keyword> statements
are actually function calls in <r/>.
We'll see that function calls and variable lookup are rich, but also have quite simple generalities
that apply in all cases. This greatly helps reasoning.
</para>

<para>
We'll also so see some minor aspects of evaluation that warrant note, e.g., when functions are actually defined.
</para>

<section>
<title>Literal Values</title>

<para>
Consider the very basic <r/> command
<r:code>
TRUE
</r:code>
Again, the REPL parses this and then evaluates it.
Let's explicitly parse this ourselves so that we can see what <r/> sees:
<r:code>
e = parse(text = "TRUE")
</r:code>
Let's look at the class and length of this:
<r:code>
class(e)
<r:output><![CDATA[
[1] "expression"
]]></r:output>
length(e)
<r:output><![CDATA[
[1] 1
]]></r:output>
</r:code>
This is like a list so, let's get the only element:
<r:code>
e = e[[1]]
</r:code>
Again, let's look at the class: 
<r:code>
class(e)
<r:output><![CDATA[
[1] "logical"
]]></r:output>
</r:code>
and the length is 1. This is a regular <r/> logical vector.
The parser - not the evaluator - has created this literal value as an <r/> logical vector.
So now, let's evaluate this as <r/> would:
<r:code>
ans = eval(e)
</r:code>
and the result is identical to <r:var>e</r:var> itself.
That is, the <r/> evaluator evaluates literal objects as themselves and that is the result.
</para>
</section>

<section>
<title>Evaluating Variable Names</title>

<para>
Now consider the seemingly very similar command to <r:expr>TRUE</r:expr>, but this time
<r:code>
T
</r:code>
which people often use instead of <r:true/>. (Don't, it will eventually trap you and be very hard to debug, and worse,
you may just get wrong answers.)
Again, let's parse this and see what <r/> sees, although for simplicity, we'll use <r:func>quote</r:func>:
<r:code>
e = quote(T)
</r:code>
What's the class of this?
<r:code>
class(e)
<r:output><![CDATA[
[1] "name"
]]></r:output>
</r:code>
Have you encountered a <r:class>name</r:class> object in <r/> before?
</para>
<para>
Now let's evaluate this command
<r:code>
eval(e)
<r:output><![CDATA[
[1] TRUE
]]></r:output>
</r:code>
This doesn't return <r:var>T</r:var> which is a variable name, but instead it returns the <r:true/> object/value.
</para>

<para>
Before we discuss the details of how the <r/> evaluator evaluated the command <r:var>T</r:var>, let's do an experiment:
we'll set <r:var>T</r:var> to 0, perhaps the starting time for a simulation.
<r:code>
T = 0
eval(e)
<r:output><![CDATA[
[1] 0
]]></r:output>
</r:code>
This time, we don't  get back <r:true/> but 0, the new value for <r:var>T</r:var>.
</para>
<para>
Let's look at the two situations - after we set the value of <r:var>T</r:var> and before we did.
How does <r/> evaluate a <r:class>name</r:class> "expression"?
We'll generalize this later, but for now, let's focus on top-level interactive commands at the <r/> prompt.
<r/> searches along the elements of the <b>search path</b>.
<r:code>
search()
<r:output><![CDATA[
 [1] ".GlobalEnv"          "package:stats"       "package:graphics"   
 [4] "package:grDevices"   "package:datasets"    "utility functions"  
 [7] "package:RShellTools" "package:utils"       "package:methods"    
[10] "Autoloads"           "package:base"       
]]></r:output>
</r:code>
Each element is an <b>environment</b> which is a container for variable name - value  pairs.
A value is assigned/bound to a variable name in a particular environment.
The evaluator iterates over the elements of the search path, querying to see if there is a variable with the specified
name.
If there is, <r/> gets the value bound/associated to that variable name in that environment and stops the search,
returning the resulting object.
</para>
<para>
Sometimes <r/> will be looking for a value of a certain type, e.g., a function, and will continue the search
even if finds a variable with the target name but the associated value is not of the correct type. We'll see this later.
</para>
<para>
So, when we assigned 0 to <r:var>T</r:var>, <r/> created a new variable <r:var>T</r:var> in our
<r:var>.GlobalEnv</r:var>
element of the search path. This is the global environment, available as an object via <r:func>globalenv()</r:func>.
It is our work space.  The other elements are typically packages, but we also have Autoloads and other elements in the
search path. (See <r:func>attach</r:func> which you should use very, very carefully, if you really must use it at all.)
Why did <r/> create a new variable <r:var>T</r:var> in the global environment when there was one in the
<r:pkg>base</r:pkg> package:
<r:code>
find("T")
<r:output><![CDATA[
[1] ".GlobalEnv"   "package:base"
]]></r:output>
</r:code>
Because that is part of the <r/> evaluation model that we will see soon. But key for now is that
evaluating the name <r:var>T</r:var>, <r/> successively queried each element of the search path for a variable named
<r:var>T</r:var>  and found it in the first element of the search path.  The value was 0 and that is the result of
evaluating <r:var>T</r:var>.
</para>
<para>
Now, let's pretend we had not assigned a value for  <r:var>T</r:var>.
We'll remove the one in the global environment with<footnote><para>BTW, this is non-standard evaluation.</para></footnote>
<r:code>
rm(T)  # remove
</r:code>
So now when we look for <r:var>T</r:var>,
<r:code>
find("T")
<r:output><![CDATA[
[1] "package:base"
]]></r:output>
</r:code>
So evaluating the expression <r:expr>T</r:expr>, <r/> will query the elements of the search path for a variable named
<r:var>T</r:var>
and find it only in the last element. This variable has the value <r:true/> assigned to it.
</para>
<para>
So evaluating a <r:class>name</r:class> expression is equivalent to
<r:code>
get(varName,  find(varName)[1])
</r:code>
</para>
</section>

<section>
<title>Environment Parents and Chain/Sequence of Environments</title>
<para>
To introduce the concept that we will see  generalizes this beyond the search path and top-level commands, note
that each environment has a parent environment, except the special <r:func>emptyenv</r:func> environment.
The <r:func>globalenv</r:func> environment's parent is
<r:code>
parent.env(globalenv())
<r:output><![CDATA[
<environment: package:stats>
attr(,"name")
[1] "package:stats"
attr(,"path")
[1] "/Users/duncan/R/R-new/build3/library/stats"
]]></r:output>
</r:code>
That environment has a parent environment  which is
<r:code>
parent.env( parent.env( globalenv() ) )
<r:output><![CDATA[
<environment: package:graphics>
attr(,"name")
[1] "package:graphics"
attr(,"path")
[1] "/Users/duncan/R/R-new/build3/library/graphics"
]]></r:output>
</r:code>
If we iterate over the parents (using <r:func>showEnv</r:func> from <file>showEnv.R</file> in the repository),
we see the search path
<r:code>
showEnv(globalenv())
<r:output><![CDATA[
<environment: R_GlobalEnv>
<environment: package:stats>
attr(,"name")
[1] "package:stats"
attr(,"path")
[1] "/Users/duncan/R/R-new/build3/library/stats"
<environment: package:graphics>
attr(,"name")
[1] "package:graphics"
attr(,"path")
[1] "/Users/duncan/R/R-new/build3/library/graphics"
<environment: package:grDevices>
attr(,"name")
[1] "package:grDevices"
attr(,"path")
[1] "/Users/duncan/R/R-new/build3/library/grDevices"
<environment: package:datasets>
attr(,"name")
[1] "package:datasets"
attr(,"path")
[1] "/Users/duncan/R/R-new/build3/library/datasets"
<environment: 0x7f9d32835f98>
attr(,"name")
[1] "utility functions"
<environment: package:RShellTools>
attr(,"name")
[1] "package:RShellTools"
attr(,"path")
[1] "/Users/duncan/Rpackages4/RShellTools"
<environment: package:utils>
attr(,"name")
[1] "package:utils"
attr(,"path")
[1] "/Users/duncan/R/R-new/build3/library/utils"
<environment: package:methods>
attr(,"name")
[1] "package:methods"
attr(,"path")
[1] "/Users/duncan/R/R-new/build3/library/methods"
<environment: 0x7f9d321c09b8>
attr(,"name")
[1] "Autoloads"
<environment: base>
]]></r:output>
</r:code>
So a more general way to describe how <r/> finds a variable by name is that
it searches in the current environment (in our case, <r:func>globalenv</r:func>)
and then its parent environment, and that environment's parent, and so on.
</para>
</section>


<xi:include href="Assignment.xml"/>

<section>
<title>Evaluating a Simple Function Call</title>

<para>
Consider a simple command <r:expr>1 + 2</r:expr>
First, let's note that this is a function call, even though it does not  appear in the usual form of <r:expr>fun(1,
2)</r:expr>.
We'll look at the language object for this
<r:code>
e = quote(1 + 2)  # or parse(text = )
class(e)
<r:output><![CDATA[
[1] "call"
]]></r:output>
</r:code>
This is a function <r:class>call</r:class>, and as we mentioned, so many language objects in <r/> are function calls.
</para>
<para>
The function is <r:expr>`+`</r:expr> as we can see from <r:expr>e[[1]]</r:expr>.
While we don't necessarily need to know, the two arguments are in <r:expr>e[[2]]</r:expr> and <r:expr>e[[3]]</r:expr>
and are of class
<r:code>
sapply(e[2:3], class)
<r:output><![CDATA[
[1] "numeric" "numeric"
]]></r:output>
</r:code>
We're showing this so that you can explore the language objects generally.
</para>


<para>
The <r/> evaluator starts evaluating this by find the function being called.
In this case, the function is identified by a <r:class>name</r:class> language object, i.e.,
<r:expr>class(e[[1]])</r:expr>.
So <r/> evaluates <r:expr>e[[1]]</r:expr> using the rules we just saw for evaluating <r:class>name</r:class> objects.
However, in this case, <r/> knows we are looking for a function, so it ignores any variables along the search path
with the same name whose values are not function objects.  This is the mode we mentioned earlier.
This allows us to "do the right thing" in cases such as
<r:code>
a = 1
b = 2
c = 3
c(a, b, c)
</r:code>
Here, we have defined a variable <r:var>c</r:var>ith a value 3, but also are calling a function
<r:func>c</r:func>.  <r/> doesn't consider the first instance of <r:var>c</r:var> when evaluating <r:expr>c(a, b,
c)</r:expr>
because it is not a function.
</para>
<para>
In our call <r:expr>1 + 2</r:expr>, <r/> finds <r:expr>`+`</r:expr> in the base package:
<r:code>
get(as.character(e[[1]]), find(as.character(e[[1]])[1]))
<r:output><![CDATA[
function (e1, e2)  .Primitive("+")
]]></r:output>
</r:code>
So now <r/> has the function being called and it can start implementing the specific call.
</para>
<para>
In this example, <r:expr>`+`</r:expr> is a special function.
We can see this as the body is a call to <r:func>.Primitive</r:func> and the <r:func>typeof</r:func> of the function
object is
<r:code>
typeof(`+`)
<r:output><![CDATA[
[1] "builtin"
]]></r:output>
</r:code>
So, let's look at a very similar call that does not involve a <literal>builtin</literal>  function, e.g.,
<r:code>
rnorm(5, -3)
</r:code>
Again, we'll get the language object just to show the similarity:
<r:code>
e = quote( rnorm(5, -3) )
</r:code>
The first element is a <r:class>name</r:class> and is <r:var>rnorm</r:var>.
<r/> finds that in the <r:pkg>stats</r:pkg> package.
It is a regular function of class <r:class>closure</r:class>:
<r:code>
fun = get(as.character(e[[1]]), find(as.character(e[[1]])[1]))
class(fun)
<r:output><![CDATA[
[1] "closure"
]]></r:output>
</r:code>
</para>


<para>
When invoking a function,  <r/>
<ol>
<li>creates a call frame (an enviroment for the parameters and local variables in the function)</li>
<li>matches the arguments in the call to the parameters in the function and assigns <i>promises</i> to evaluate the
arguments when they are needed</li>
<li>evaluates each expression in the body of the function</li>
<li>returns the value of the last evaluated expression in the body of the function</li>
</ol>
All of these are essential aspects of evaluating a function call in <r/>.
The concept of a promise may be new.
Evaluating each expression in the body is exactly what we have been discussing in this module.
</para>
<para>
The first thing <r/> does is to create the call frame.
Then it creates a variable within it for each parameter.
If the parameter has a default value in the function definition,
<r/> connects that expression for the default value to the corresponding
variable it created in the call frame.  Importantly, it does not
evaluate that value at this point in time.
It merely keeps this expression in reserve in case a) there is no explicit
argument for this parameter, and b) the value is not needed in the computations.
</para>
<para>
The next step is to 
</para>
<para>


takes the call and matches the arguments
in the specific call to the parameters in the function definition.
Specifically, we create a new <b>call frame</b>.
This is an environment - a container for variable name-value pairs.
When creating the call frame, <r/> creates a variable for each
of the parameters in the function definition.
So for <r:func>rnorm</r:func>, we have
<r:code>
names(formals(rnorm))
<r:output><![CDATA[
[1] "n"    "mean" "sd"  
]]></r:output>
</r:code>
So we have three entries in the new call frame for this specific call.
</para>


</section>


<section>
<title>When are Functions Created and Defined</title>

<para>
Consider the command
<r:code>
f = function(x) x + 1
</r:code>
When is the function object created?
Firstly, we can separate this from the assignment to <r:var>f</r:var> as the right-hand-side
of the assignment is evaluated before the assignment (even with lazy evaluation.)
So let's deal with
<r:code>
function(x) x + 1
</r:code>
We can parse this or use <r:func>quote</r:func> to get the language object the parser will yield
<r:code>
e = quote(function(x) x + 1)
</r:code>
What's the class of <r:var>e</r:var>
<r:code>
class(e)
<r:output><![CDATA[
[1] "call"
]]></r:output>
</r:code>
So this is not a function - yet.
It is a call.  What is it a call to?
<r:code>
e[[1]]
<r:output><![CDATA[
`function`
]]></r:output>
</r:code>
So this is a call to the function named <r:keyword>function</r:keyword>.
Like `+`, we can get the <r:keyword>function</r:keyword> object, i.e.,
<r:code>
`function`
<r:output><![CDATA[
.Primitive("function")
]]></r:output>
</r:code>
We look at its class and <r:func>typeof</r:func>
<r:code>
typeof(`function`)
<r:output><![CDATA[
[1] "special"
]]></r:output>
</r:code>
and we see it is <r:class>special</r:class> and different from a regular function such as
<r:func>rnorm</r:func> or <r:func>paste</r:func> which have <literal>closure</literal> as the
value of <r:func>typeof</r:func>.
</para>
<para>
So how does the <r/> evaluate this call?
It is like <r:keyword>for</r:keyword> and <r:keyword>while</r:keyword> in that the syntax
doesn't look like a regular call as it does have the (), but is followed by the body of the function being created.
But let's look at <r:var>e</r:var>.  It is a call to <r:keyword>function</r:keyword>,
and it has 4 elements
<ol>
<li>the function being called, i.e., <r:expr>`function`</r:expr></li>
<li>the named list of parameter default values</li>
<li>the body of the function</li>
<li>the <r:class>srcref</r:class> which is the original text of the code from the parser</li>
</ol>
We don't need to concern ourselves with the fourth element.
The key is that the call to <r:keyword>`function`</r:keyword> sees the parameter list
and the body and creates a function object of class <r:class>closure</r:class>.
</para>
<para>
In addition to constructing the <r:class>closure</r:class> object, <r:func>`function`</r:func>
also sets the environment of the function to the caller's  environment,
in which the call to <r:func>`function`</r:func> is made.
<ul>
<li>When we create a function at the interactive prompt, this environment is the global environment.</li>
<li>When we source code from a file or connection, by default, that uses the global environment
as the environment in which to evaluate that code, so the environment for the functions is the global environment.
If we specify a different environment for <r:func>source</r:func> to use (via the <r:arg>local</r:arg> parameter),
any functions sourced from the connection will have that environment.</li>
<li>If a function is created in the body of another function (say <r:var>fun1</r:var>), the environment
is the call frame of that function whose body is being evaluated, <r:var>fun1</r:var>.  Note that this is not
  the environment of that function, but the call frame of the specific call to that function.</li>
</ul>
</para>
<para>
At the interactive prompt, 
<r:code>
f = function(x) x + 1
environment(f)
</r:code>
The same applies for an anonymous function:
<r:code>
environment(function(x) x + 1)
</r:code>
This means that anonymous functions in top-level (at the interactive prompt) calls
such as 
<r:code>
sapply(x, function(x) sum(x == a))
</r:code>
have the global environment as their environment.
In this example, each call to the anonymous function will search for <r:var>a</r:var> in the
call frame and then in the global environment and along its chain of environments.
</para>

<section>
<title>Top-level Functions</title>
<para>
Consider <r:func>source</r:func>. We'll source the file <file>showEnv.R</file> from the repository:
<r:code>
ls()
source("showEnv.R")
ls()
</r:code>
So we have two new functions: <r:func>showEnv</r:func> and <r:func>findVarFromFun</r:func>.
Their environments are the global environment
<r:code>
environment(showEnv)
<r:output><![CDATA[
<environment: R_GlobalEnv>
]]></r:output>
</r:code>
</para>
</section>

<section>
<title><r:func>source</r:func> and Environments</title>

<para>
Now, let's create a separate environment and source the file using that as the environment in which to evaluate the <r/>
code in the file.  We create it with <r:func>new.env</r:func> and then check to see its parent environment:
<r:code>
env = new.env()
parent.env(env)
<r:output><![CDATA[
<environment: R_GlobalEnv>
]]></r:output>
</r:code>
Now we can <r:func>source</r:func> the file:
<r:code>
source("showEnv.R", env)
</r:code>
The functions are now (also) in <r:var>env</r:var>
<r:code>
ls(env)
<r:output><![CDATA[
[1] "findVarFromFun" "showEnv"       
]]></r:output>
</r:code>
</para>
<para>
Are the two versions of  <r:func>showEnv</r:func> the same?  No:
<r:code>
identical(showEnv, env$showEnv)
<r:output><![CDATA[
[1] FALSE
]]></r:output>
</r:code>
This is because the have different environments and so could behave quite differently by finding different values for
the same names/symbols.
</para>


<para>
We could go further and refine the environment chain for <r:func>showEnv</r:func>.
All of the non-local
names are actually in the <r:pkg>base</r:pkg> package.
We can't put <r:func>showEnv</r:func> in base since that is locked.
However, we can create a new environment whose parent is the <r:pkg>base</r:pkg> namespace/environment:
<r:code>
env = new.env(parent = getNamespace("base"))
parent.env(env)
<r:output><![CDATA[
<environment: namespace:base>
]]></r:output>
</r:code>
We can use this in the call to <r:func>source</r:func>
<r:code>
source("showEnv.R", env)
</r:code>
<r:func>showEnv</r:func>'s environment is now <r:var>env</r:var>
and its parent is base
</para>


<question>
<para>
Given the computations above, i.e.,
<r:code>
source("showEnv.R")
env = new.env(parent = getNamespace("base"))
source("showEnv.R", env)
</r:code>
What's the difference between the results of 
<r:code>
env$showEnv(environment( env$showEnv))[1:4]
env$showEnv(environment( showEnv))[1:4]
</r:code>
</para>
<answer>
<para>
<r:code>
env$showEnv(environment( env$showEnv))[1:4]
<r:output><![CDATA[
[[1]]
<environment: 0x7fd8aa6fc538>

[[2]]
<environment: namespace:base>

[[3]]
<environment: R_GlobalEnv>

[[4]]
<environment: package:stats>
attr(,"name")
[1] "package:stats"
attr(,"path")
[1] "/Users/duncan/R/R-new/build3/library/stats"

]]></r:output>
env$showEnv(environment( showEnv))[1:4]
<r:output><![CDATA[
[[1]]
<environment: R_GlobalEnv>

[[2]]
<environment: package:stats>
attr(,"name")
[1] "package:stats"
attr(,"path")
[1] "/Users/duncan/R/R-new/build3/library/stats"

[[3]]
<environment: package:graphics>
attr(,"name")
[1] "package:graphics"
attr(,"path")
[1] "/Users/duncan/R/R-new/build3/library/graphics"

[[4]]
<environment: package:grDevices>
attr(,"name")
[1] "package:grDevices"
attr(,"path")
[1] "/Users/duncan/R/R-new/build3/library/grDevices"
]]></r:output>
</r:code>
</para>
</answer>
</question>



<para>
Next let's perform a little experiment.
<r:code>
f = function(x) x + a
</r:code>
<r:code>
env1 = new.env()
env1$a = 10
environment(f) = env1
f(1)
</r:code>

Now let's change the value of <r:var>a</r:var> in <r:var>env1</r:var>:
<r:code>
env1$a = 55
f(1)
</r:code>
</para>

<para>
Now let's create two identical functions:
<r:code>
f1 = f2 = function(x) x + a
</r:code>
We'll create two different environments and set the environment for <r:func>f1</r:func> and <r:func>f2</r:func> to these
<r:code>
env1 = new.env()
env2 = new.env()
env1$a = env2$a = 100
environment(f1) = env1
environment(f2) = env2
</r:code>
<r:code>
f1(1) == f2(1)
</r:code>
<r:code>
env2$a = 11
</r:code>
Now, do the two functions give the same result? No
<r:code>
f1(1) == f2(1)
[1] FALSE
</r:code>
The values are 
<r:code>
c(f1(1), f2(1))
<r:output><![CDATA[
[1] 101  12
]]></r:output>
</r:code>
</para>

<para>
This is an explicit illustration of manually specifying the environment of a function.
Typically it happens implicitly, e.g., at the top-level prompt,
when <r:func>source</r:func> a file, when the code in a package is evaluated during installation.
However, it commonly happens when we define a function within the body of another function.
</para>
</section>


<section>
<title>Functions within Functions</title>

<para>
We often see a function defined within the body of another function.
These might anonymous functions such as
<r:code><![CDATA[
f = function(d) {
    w = sapply(d, function(x) is.list(x) && length(x) > 0)
    x[w]
}
]]></r:code>
Here, the function within the call to <r:func>sapply</r:func> is an
anonymous function and defined within the body of <r:func>f</r:func>.
We also see this in the form
<r:code><![CDATA[
f = function(d) {
    check = function(x)
                 is.list(x) && length(x) > 0
    w = sapply(d, check)
    x[w]
}
]]></r:code>
This behave identically.
Again, the environment of a function is the environment
</para>
</section>

</section>


<section>
<title>Formulas, Environments and Scope</title>

<para>

</para>
</section>

</section>
